
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os)


-- Parsing `cic_pruned.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: cic_pruned.v
Parsing Verilog input from `cic_pruned.v' to AST representation.
Generating RTLIL representation for module `\counter_mod2'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\int'.
Generating RTLIL representation for module `\cic_comb'.
Generating RTLIL representation for module `\cic_pruned'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top cic_pruned -json build/cic_pruned.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/cells_sim.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \cic_pruned
Used module:     \cic_comb
Used module:     \counter_mod2
Used module:     \int
Used module:         \dff

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\cic_comb'.
Parameter \WIDTH = 8'00010000
Generating RTLIL representation for module `$paramod\cic_comb\WIDTH=8'00010000'.

2.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\cic_comb'.
Parameter \WIDTH = 8'00010000
Found cached RTLIL representation for module `$paramod\cic_comb\WIDTH=8'00010000'.

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\cic_comb'.
Parameter \WIDTH = 8'00010000
Found cached RTLIL representation for module `$paramod\cic_comb\WIDTH=8'00010000'.

2.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\counter_mod2'.
Parameter \WIDTH = 5
Generating RTLIL representation for module `$paramod\counter_mod2\WIDTH=5'.

2.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\int'.
Parameter \I_WIDTH = 8'00010000
Parameter \EXTEND = 0
Generating RTLIL representation for module `$paramod\int\I_WIDTH=8'00010000\EXTEND=0'.

2.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\int'.
Parameter \I_WIDTH = 8'00010000
Parameter \EXTEND = 0
Found cached RTLIL representation for module `$paramod\int\I_WIDTH=8'00010000\EXTEND=0'.

2.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\int'.
Parameter \I_WIDTH = 8'00010000
Parameter \EXTEND = 0
Found cached RTLIL representation for module `$paramod\int\I_WIDTH=8'00010000\EXTEND=0'.

2.2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 9
Generating RTLIL representation for module `$paramod\dff\WIDTH=9'.

2.2.10. Analyzing design hierarchy..
Top module:  \cic_pruned
Used module:     $paramod\cic_comb\WIDTH=8'00010000
Used module:     $paramod\counter_mod2\WIDTH=5
Used module:     $paramod\int\I_WIDTH=8'00010000\EXTEND=0
Used module:         \dff

2.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 16
Generating RTLIL representation for module `$paramod\dff\WIDTH=16'.

2.2.12. Analyzing design hierarchy..
Top module:  \cic_pruned
Used module:     $paramod\cic_comb\WIDTH=8'00010000
Used module:     $paramod\counter_mod2\WIDTH=5
Used module:     $paramod\int\I_WIDTH=8'00010000\EXTEND=0
Used module:         $paramod\dff\WIDTH=16

2.2.13. Analyzing design hierarchy..
Top module:  \cic_pruned
Used module:     $paramod\cic_comb\WIDTH=8'00010000
Used module:     $paramod\counter_mod2\WIDTH=5
Used module:     $paramod\int\I_WIDTH=8'00010000\EXTEND=0
Used module:         $paramod\dff\WIDTH=16
Removing unused module `$paramod\dff\WIDTH=9'.
Removing unused module `\cic_comb'.
Removing unused module `\int'.
Removing unused module `\dff'.
Removing unused module `\counter_mod2'.
Removed 5 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../dff/dff.v:28$26 in module $paramod\dff\WIDTH=16.
Marked 3 switch rules as full_case in process $proc$../counter_mod2/counter_mod2.v:33$17 in module $paramod\counter_mod2\WIDTH=5.
Marked 1 switch rules as full_case in process $proc$cic_comb.v:18$14 in module $paramod\cic_comb\WIDTH=8'00010000.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:24$27'.
  Set init value: \q = 16'0000000000000000
Found init rule in `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:28$20'.
  Set init value: \next = 5'00000
Found init rule in `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:13$16'.
  Set init value: \delay = 16'0000000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cic_pruned.$proc$cic_pruned.v:121$13'.
     1/1: $0\int_to_comb[15:0]
Creating decoders for process `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:24$27'.
     1/1: $1\q[15:0]
Creating decoders for process `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:28$26'.
     1/1: $0\q[15:0]
Creating decoders for process `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:28$20'.
     1/1: $1\next[4:0]
Creating decoders for process `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:33$17'.
     1/1: $0\next[4:0]
Creating decoders for process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:13$16'.
     1/1: $1\delay[15:0]
Creating decoders for process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:18$14'.
     1/2: $0\delay[15:0]
     2/2: $0\o_data[15:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cic_pruned.\int_to_comb' using process `\cic_pruned.$proc$cic_pruned.v:121$13'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `$paramod\dff\WIDTH=16.\q' using process `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:28$26'.
  created $dff cell `$procdff$53' with positive edge clock.
Creating register for signal `$paramod\counter_mod2\WIDTH=5.\next' using process `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:33$17'.
  created $dff cell `$procdff$54' with positive edge clock.
Creating register for signal `$paramod\cic_comb\WIDTH=8'00010000.\o_data' using process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:18$14'.
  created $dff cell `$procdff$55' with positive edge clock.
Creating register for signal `$paramod\cic_comb\WIDTH=8'00010000.\delay' using process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:18$14'.
  created $dff cell `$procdff$56' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `cic_pruned.$proc$cic_pruned.v:121$13'.
Removing empty process `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:24$27'.
Found and cleaned up 1 empty switch in `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:28$26'.
Removing empty process `$paramod\dff\WIDTH=16.$proc$../dff/dff.v:28$26'.
Removing empty process `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:28$20'.
Found and cleaned up 4 empty switches in `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:33$17'.
Removing empty process `$paramod\counter_mod2\WIDTH=5.$proc$../counter_mod2/counter_mod2.v:33$17'.
Removing empty process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:13$16'.
Found and cleaned up 2 empty switches in `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:18$14'.
Removing empty process `$paramod\cic_comb\WIDTH=8'00010000.$proc$cic_comb.v:18$14'.
Cleaned up 7 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template $paramod\counter_mod2\WIDTH=5 for cells of type $paramod\counter_mod2\WIDTH=5.
Using template $paramod\cic_comb\WIDTH=8'00010000 for cells of type $paramod\cic_comb\WIDTH=8'00010000.
Using template $paramod\int\I_WIDTH=8'00010000\EXTEND=0 for cells of type $paramod\int\I_WIDTH=8'00010000\EXTEND=0.
Using template $paramod\dff\WIDTH=16 for cells of type $paramod\dff\WIDTH=16.
<suppressed ~10 debug messages>
No more expansions possible.
Deleting now unused module $paramod\dff\WIDTH=16.
Deleting now unused module $paramod\int\I_WIDTH=8'00010000\EXTEND=0.
Deleting now unused module $paramod\counter_mod2\WIDTH=5.
Deleting now unused module $paramod\cic_comb\WIDTH=8'00010000.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.
<suppressed ~5 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..
Removed 1 unused cells and 47 unused wires.
<suppressed ~3 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module cic_pruned..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cic_pruned..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cic_pruned.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell cic_pruned.$techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18 ($add).
Removed top 27 bits (of 32) from port Y of cell cic_pruned.$techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18 ($add).
Removed top 27 bits (of 32) from wire cic_pruned.$techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\cmp2lut.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cic_pruned:
  creating $macc model for $techmap\combStage[0].comb.$sub$cic_comb.v:28$15 ($sub).
  creating $macc model for $techmap\combStage[1].comb.$sub$cic_comb.v:28$15 ($sub).
  creating $macc model for $techmap\combStage[2].comb.$sub$cic_comb.v:28$15 ($sub).
  creating $macc model for $techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18 ($add).
  creating $macc model for $techmap\intStage[0].int.$add$../int/int.v:39$22 ($add).
  creating $macc model for $techmap\intStage[1].int.$add$../int/int.v:39$22 ($add).
  creating $macc model for $techmap\intStage[2].int.$add$../int/int.v:39$22 ($add).
  creating $alu model for $macc $techmap\intStage[2].int.$add$../int/int.v:39$22.
  creating $alu model for $macc $techmap\intStage[1].int.$add$../int/int.v:39$22.
  creating $alu model for $macc $techmap\intStage[0].int.$add$../int/int.v:39$22.
  creating $alu model for $macc $techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18.
  creating $alu model for $macc $techmap\combStage[2].comb.$sub$cic_comb.v:28$15.
  creating $alu model for $macc $techmap\combStage[1].comb.$sub$cic_comb.v:28$15.
  creating $alu model for $macc $techmap\combStage[0].comb.$sub$cic_comb.v:28$15.
  creating $alu cell for $techmap\combStage[0].comb.$sub$cic_comb.v:28$15: $auto$alumacc.cc:474:replace_alu$58
  creating $alu cell for $techmap\combStage[1].comb.$sub$cic_comb.v:28$15: $auto$alumacc.cc:474:replace_alu$61
  creating $alu cell for $techmap\combStage[2].comb.$sub$cic_comb.v:28$15: $auto$alumacc.cc:474:replace_alu$64
  creating $alu cell for $techmap\dec_cnt.$add$../counter_mod2/counter_mod2.v:41$18: $auto$alumacc.cc:474:replace_alu$67
  creating $alu cell for $techmap\intStage[0].int.$add$../int/int.v:39$22: $auto$alumacc.cc:474:replace_alu$70
  creating $alu cell for $techmap\intStage[1].int.$add$../int/int.v:39$22: $auto$alumacc.cc:474:replace_alu$73
  creating $alu cell for $techmap\intStage[2].int.$add$../int/int.v:39$22: $auto$alumacc.cc:474:replace_alu$76
  created 7 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cic_pruned..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cic_pruned.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/brams_map.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cic_pruned..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cic_pruned.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\techmap.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/arith_map.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~101 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.
<suppressed ~105 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..
Removed 142 unused cells and 116 unused wires.
<suppressed ~143 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell cic_pruned.$auto$alumacc.cc:474:replace_alu$67.slice[0].carry: CO=\dec_cnt.next [0]
Mapping SB_LUT4 cell cic_pruned.$auto$alumacc.cc:474:replace_alu$67.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.
<suppressed ~13 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module cic_pruned:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$164 to $_DFFE_PP_ for $techmap\dec_cnt.$0\next[4:0] [0] -> \dec_cnt.next [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$165 to $_DFFE_PP_ for $techmap\dec_cnt.$0\next[4:0] [1] -> \dec_cnt.next [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$166 to $_DFFE_PP_ for $techmap\dec_cnt.$0\next[4:0] [2] -> \dec_cnt.next [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$167 to $_DFFE_PP_ for $techmap\dec_cnt.$0\next[4:0] [3] -> \dec_cnt.next [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$168 to $_DFFE_PP_ for $techmap\dec_cnt.$0\next[4:0] [4] -> \dec_cnt.next [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$195 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [0] -> \combStage[0].comb.delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$196 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [1] -> \combStage[0].comb.delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$197 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [2] -> \combStage[0].comb.delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$198 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [3] -> \combStage[0].comb.delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$199 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [4] -> \combStage[0].comb.delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$200 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [5] -> \combStage[0].comb.delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$201 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [6] -> \combStage[0].comb.delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$202 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [7] -> \combStage[0].comb.delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$203 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [8] -> \combStage[0].comb.delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$204 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [9] -> \combStage[0].comb.delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$205 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [10] -> \combStage[0].comb.delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$206 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [11] -> \combStage[0].comb.delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$207 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [12] -> \combStage[0].comb.delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$208 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [13] -> \combStage[0].comb.delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$209 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [14] -> \combStage[0].comb.delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$210 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\delay[15:0] [15] -> \combStage[0].comb.delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$211 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [0] -> \combStage[0].comb.o_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$212 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [1] -> \combStage[0].comb.o_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$213 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [2] -> \combStage[0].comb.o_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$214 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [3] -> \combStage[0].comb.o_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$215 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [4] -> \combStage[0].comb.o_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$216 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [5] -> \combStage[0].comb.o_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$217 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [6] -> \combStage[0].comb.o_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$218 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [7] -> \combStage[0].comb.o_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$219 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [8] -> \combStage[0].comb.o_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$220 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [9] -> \combStage[0].comb.o_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$221 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [10] -> \combStage[0].comb.o_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$222 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [11] -> \combStage[0].comb.o_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$223 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [12] -> \combStage[0].comb.o_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$224 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [13] -> \combStage[0].comb.o_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$225 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [14] -> \combStage[0].comb.o_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$226 to $_DFFE_PP_ for $techmap\combStage[0].comb.$0\o_data[15:0] [15] -> \combStage[0].comb.o_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$291 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [0] -> \combStage[1].comb.delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$292 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [1] -> \combStage[1].comb.delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$293 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [2] -> \combStage[1].comb.delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$294 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [3] -> \combStage[1].comb.delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$295 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [4] -> \combStage[1].comb.delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$296 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [5] -> \combStage[1].comb.delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$297 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [6] -> \combStage[1].comb.delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$298 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [7] -> \combStage[1].comb.delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$299 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [8] -> \combStage[1].comb.delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$300 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [9] -> \combStage[1].comb.delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$301 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [10] -> \combStage[1].comb.delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$302 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [11] -> \combStage[1].comb.delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$303 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [12] -> \combStage[1].comb.delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$304 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [13] -> \combStage[1].comb.delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$305 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [14] -> \combStage[1].comb.delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$306 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\delay[15:0] [15] -> \combStage[1].comb.delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$307 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [0] -> \combStage[1].comb.o_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$308 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [1] -> \combStage[1].comb.o_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$309 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [2] -> \combStage[1].comb.o_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$310 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [3] -> \combStage[1].comb.o_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$311 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [4] -> \combStage[1].comb.o_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$312 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [5] -> \combStage[1].comb.o_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$313 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [6] -> \combStage[1].comb.o_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$314 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [7] -> \combStage[1].comb.o_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$315 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [8] -> \combStage[1].comb.o_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$316 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [9] -> \combStage[1].comb.o_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$317 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [10] -> \combStage[1].comb.o_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$318 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [11] -> \combStage[1].comb.o_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$319 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [12] -> \combStage[1].comb.o_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$320 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [13] -> \combStage[1].comb.o_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$321 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [14] -> \combStage[1].comb.o_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$322 to $_DFFE_PP_ for $techmap\combStage[1].comb.$0\o_data[15:0] [15] -> \combStage[1].comb.o_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$374 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [0] -> \combStage[2].comb.delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$375 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [1] -> \combStage[2].comb.delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$376 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [2] -> \combStage[2].comb.delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$377 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [3] -> \combStage[2].comb.delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$378 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [4] -> \combStage[2].comb.delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$379 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [5] -> \combStage[2].comb.delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$380 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [6] -> \combStage[2].comb.delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$381 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [7] -> \combStage[2].comb.delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$382 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [8] -> \combStage[2].comb.delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$383 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [9] -> \combStage[2].comb.delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$384 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [10] -> \combStage[2].comb.delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$385 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [11] -> \combStage[2].comb.delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$386 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [12] -> \combStage[2].comb.delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$387 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [13] -> \combStage[2].comb.delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$388 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [14] -> \combStage[2].comb.delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$389 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\delay[15:0] [15] -> \combStage[2].comb.delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$390 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [0] -> \combStage[2].comb.o_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$391 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [1] -> \combStage[2].comb.o_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$392 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [2] -> \combStage[2].comb.o_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$393 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [3] -> \combStage[2].comb.o_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$394 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [4] -> \combStage[2].comb.o_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$395 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [5] -> \combStage[2].comb.o_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$396 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [6] -> \combStage[2].comb.o_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$397 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [7] -> \combStage[2].comb.o_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$398 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [8] -> \combStage[2].comb.o_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$399 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [9] -> \combStage[2].comb.o_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$400 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [10] -> \combStage[2].comb.o_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$401 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [11] -> \combStage[2].comb.o_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$402 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [12] -> \combStage[2].comb.o_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$403 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [13] -> \combStage[2].comb.o_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$404 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [14] -> \combStage[2].comb.o_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$405 to $_DFFE_PP_ for $techmap\combStage[2].comb.$0\o_data[15:0] [15] -> \combStage[2].comb.o_data [15].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/cells_map.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~165 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.
<suppressed ~253 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in cic_pruned.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$549 (SB_DFF): \intStage[1].int.zinv.q [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$566 (SB_DFF): \intStage[2].int.zinv.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$567 (SB_DFF): \intStage[2].int.zinv.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$568 (SB_DFF): \intStage[2].int.zinv.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$569 (SB_DFF): \intStage[2].int.zinv.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$570 (SB_DFF): \intStage[2].int.zinv.q [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$571 (SB_DFF): \intStage[2].int.zinv.q [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFF): \intStage[2].int.zinv.q [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$573 (SB_DFF): \intStage[2].int.zinv.q [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$574 (SB_DFF): \intStage[2].int.zinv.q [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$575 (SB_DFF): \intStage[2].int.zinv.q [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$576 (SB_DFF): \intStage[2].int.zinv.q [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$577 (SB_DFF): \intStage[2].int.zinv.q [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$578 (SB_DFF): \intStage[2].int.zinv.q [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$579 (SB_DFF): \intStage[2].int.zinv.q [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$580 (SB_DFF): \intStage[2].int.zinv.q [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$581 (SB_DFF): \intStage[2].int.zinv.q [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$164 (SB_DFFE): \dec_cnt.next [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$165 (SB_DFFE): \dec_cnt.next [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$166 (SB_DFFE): \dec_cnt.next [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$167 (SB_DFFE): \dec_cnt.next [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$195 (SB_DFFE): \combStage[0].comb.delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$196 (SB_DFFE): \combStage[0].comb.delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$197 (SB_DFFE): \combStage[0].comb.delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$198 (SB_DFFE): \combStage[0].comb.delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$199 (SB_DFFE): \combStage[0].comb.delay [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$200 (SB_DFFE): \combStage[0].comb.delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$201 (SB_DFFE): \combStage[0].comb.delay [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$202 (SB_DFFE): \combStage[0].comb.delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$204 (SB_DFFE): \combStage[0].comb.delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$205 (SB_DFFE): \combStage[0].comb.delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$206 (SB_DFFE): \combStage[0].comb.delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$207 (SB_DFFE): \combStage[0].comb.delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$208 (SB_DFFE): \combStage[0].comb.delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$209 (SB_DFFE): \combStage[0].comb.delay [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$210 (SB_DFFE): \combStage[0].comb.delay [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$203 (SB_DFFE): \combStage[0].comb.delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$291 (SB_DFFE): \combStage[1].comb.delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$292 (SB_DFFE): \combStage[1].comb.delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$293 (SB_DFFE): \combStage[1].comb.delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$294 (SB_DFFE): \combStage[1].comb.delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$295 (SB_DFFE): \combStage[1].comb.delay [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$296 (SB_DFFE): \combStage[1].comb.delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$297 (SB_DFFE): \combStage[1].comb.delay [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$298 (SB_DFFE): \combStage[1].comb.delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$300 (SB_DFFE): \combStage[1].comb.delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$301 (SB_DFFE): \combStage[1].comb.delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$302 (SB_DFFE): \combStage[1].comb.delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$303 (SB_DFFE): \combStage[1].comb.delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$304 (SB_DFFE): \combStage[1].comb.delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$305 (SB_DFFE): \combStage[1].comb.delay [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$306 (SB_DFFE): \combStage[1].comb.delay [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$299 (SB_DFFE): \combStage[1].comb.delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$382 (SB_DFFE): \combStage[2].comb.delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$374 (SB_DFFE): \combStage[2].comb.delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$375 (SB_DFFE): \combStage[2].comb.delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$376 (SB_DFFE): \combStage[2].comb.delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$377 (SB_DFFE): \combStage[2].comb.delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$378 (SB_DFFE): \combStage[2].comb.delay [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$379 (SB_DFFE): \combStage[2].comb.delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$381 (SB_DFFE): \combStage[2].comb.delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$383 (SB_DFFE): \combStage[2].comb.delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$384 (SB_DFFE): \combStage[2].comb.delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$385 (SB_DFFE): \combStage[2].comb.delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$386 (SB_DFFE): \combStage[2].comb.delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$387 (SB_DFFE): \combStage[2].comb.delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$388 (SB_DFFE): \combStage[2].comb.delay [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$389 (SB_DFFE): \combStage[2].comb.delay [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$380 (SB_DFFE): \combStage[2].comb.delay [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFF): \intStage[0].int.zinv.q [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF): \intStage[0].int.zinv.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF): \intStage[0].int.zinv.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFF): \intStage[0].int.zinv.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFF): \intStage[0].int.zinv.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFF): \intStage[0].int.zinv.q [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFF): \intStage[0].int.zinv.q [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFF): \intStage[0].int.zinv.q [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFF): \intStage[0].int.zinv.q [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFF): \intStage[0].int.zinv.q [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFF): \intStage[0].int.zinv.q [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFF): \intStage[0].int.zinv.q [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFF): \intStage[0].int.zinv.q [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFF): \intStage[0].int.zinv.q [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFF): \intStage[1].int.zinv.q [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$534 (SB_DFF): \intStage[1].int.zinv.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$535 (SB_DFF): \intStage[1].int.zinv.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$536 (SB_DFF): \intStage[1].int.zinv.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFF): \intStage[1].int.zinv.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFF): \intStage[1].int.zinv.q [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFF): \intStage[0].int.zinv.q [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFF): \intStage[1].int.zinv.q [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFF): \intStage[0].int.zinv.q [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFF): \intStage[1].int.zinv.q [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFF): \intStage[1].int.zinv.q [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFF): \intStage[1].int.zinv.q [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFF): \intStage[1].int.zinv.q [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFF): \intStage[1].int.zinv.q [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF): \intStage[1].int.zinv.q [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$548 (SB_DFF): \intStage[1].int.zinv.q [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$168 (SB_DFFE): \dec_cnt.next [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFF): \intStage[1].int.zinv.q [6] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in cic_pruned.
  Merging $auto$simplemap.cc:277:simplemap_mux$565 (A=\intStage[1].int.zinv.i_d [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$549 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$582 (A=\intStage[2].int.zinv.i_d [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$566 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$583 (A=\intStage[2].int.zinv.i_d [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$567 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$584 (A=\intStage[2].int.zinv.i_d [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$568 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$585 (A=\intStage[2].int.zinv.i_d [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$569 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$586 (A=\intStage[2].int.zinv.i_d [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$570 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$587 (A=\intStage[2].int.zinv.i_d [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$571 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$588 (A=\intStage[2].int.zinv.i_d [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$589 (A=\intStage[2].int.zinv.i_d [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$573 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$590 (A=\intStage[2].int.zinv.i_d [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$574 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$591 (A=\intStage[2].int.zinv.i_d [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$575 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$592 (A=\intStage[2].int.zinv.i_d [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$576 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$593 (A=\intStage[2].int.zinv.i_d [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$577 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$594 (A=\intStage[2].int.zinv.i_d [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$578 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$595 (A=\intStage[2].int.zinv.i_d [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$579 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$596 (A=\intStage[2].int.zinv.i_d [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$580 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$597 (A=\intStage[2].int.zinv.i_d [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$581 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$174 (A=$auto$wreduce.cc:455:run$57 [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$164 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$175 (A=$auto$simplemap.cc:309:simplemap_lut$915 [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$165 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$176 (A=$auto$wreduce.cc:455:run$57 [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$166 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$177 (A=$auto$wreduce.cc:455:run$57 [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$167 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$259 (A=\int_to_comb [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$195 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$260 (A=\int_to_comb [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$196 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$261 (A=\int_to_comb [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$197 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$262 (A=\int_to_comb [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$198 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$263 (A=\int_to_comb [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$199 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$264 (A=\int_to_comb [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$200 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$265 (A=\int_to_comb [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$201 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$266 (A=\int_to_comb [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$202 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$268 (A=\int_to_comb [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$204 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$269 (A=\int_to_comb [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$205 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$270 (A=\int_to_comb [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$206 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$271 (A=\int_to_comb [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$207 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$272 (A=\int_to_comb [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$208 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$273 (A=\int_to_comb [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$209 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$274 (A=\int_to_comb [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$210 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$267 (A=\int_to_comb [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$203 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$355 (A=\combStage[0].comb.o_data [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$291 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$356 (A=\combStage[0].comb.o_data [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$292 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$357 (A=\combStage[0].comb.o_data [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$293 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$358 (A=\combStage[0].comb.o_data [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$294 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$359 (A=\combStage[0].comb.o_data [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$295 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$360 (A=\combStage[0].comb.o_data [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$296 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$361 (A=\combStage[0].comb.o_data [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$297 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$362 (A=\combStage[0].comb.o_data [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$298 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$364 (A=\combStage[0].comb.o_data [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$300 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$365 (A=\combStage[0].comb.o_data [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$301 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$366 (A=\combStage[0].comb.o_data [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$302 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$367 (A=\combStage[0].comb.o_data [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$303 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$368 (A=\combStage[0].comb.o_data [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$304 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$369 (A=\combStage[0].comb.o_data [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$305 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$370 (A=\combStage[0].comb.o_data [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$306 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$363 (A=\combStage[0].comb.o_data [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$299 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$446 (A=\combStage[1].comb.o_data [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$382 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$438 (A=\combStage[1].comb.o_data [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$374 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$439 (A=\combStage[1].comb.o_data [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$375 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$440 (A=\combStage[1].comb.o_data [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$376 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$441 (A=\combStage[1].comb.o_data [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$377 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$442 (A=\combStage[1].comb.o_data [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$378 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$443 (A=\combStage[1].comb.o_data [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$379 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$445 (A=\combStage[1].comb.o_data [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$381 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$447 (A=\combStage[1].comb.o_data [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$383 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$448 (A=\combStage[1].comb.o_data [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$384 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$449 (A=\combStage[1].comb.o_data [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$385 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$450 (A=\combStage[1].comb.o_data [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$386 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$451 (A=\combStage[1].comb.o_data [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$387 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$452 (A=\combStage[1].comb.o_data [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$388 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$453 (A=\combStage[1].comb.o_data [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$389 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$444 (A=\combStage[1].comb.o_data [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$380 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$526 (A=\intStage[0].int.zinv.i_d [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$518 (A=\intStage[0].int.zinv.i_d [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$519 (A=\intStage[0].int.zinv.i_d [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$520 (A=\intStage[0].int.zinv.i_d [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$521 (A=\intStage[0].int.zinv.i_d [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$522 (A=\intStage[0].int.zinv.i_d [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$523 (A=\intStage[0].int.zinv.i_d [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$525 (A=\intStage[0].int.zinv.i_d [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$527 (A=\intStage[0].int.zinv.i_d [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$528 (A=\intStage[0].int.zinv.i_d [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$529 (A=\intStage[0].int.zinv.i_d [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$530 (A=\intStage[0].int.zinv.i_d [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$531 (A=\intStage[0].int.zinv.i_d [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$532 (A=\intStage[0].int.zinv.i_d [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$558 (A=\intStage[1].int.zinv.i_d [8], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$550 (A=\intStage[1].int.zinv.i_d [0], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$534 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$551 (A=\intStage[1].int.zinv.i_d [1], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$535 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$552 (A=\intStage[1].int.zinv.i_d [2], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$536 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$553 (A=\intStage[1].int.zinv.i_d [3], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$554 (A=\intStage[1].int.zinv.i_d [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$524 (A=\intStage[0].int.zinv.i_d [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$555 (A=\intStage[1].int.zinv.i_d [5], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$533 (A=\intStage[0].int.zinv.i_d [15], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$557 (A=\intStage[1].int.zinv.i_d [7], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$559 (A=\intStage[1].int.zinv.i_d [9], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$560 (A=\intStage[1].int.zinv.i_d [10], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$561 (A=\intStage[1].int.zinv.i_d [11], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$562 (A=\intStage[1].int.zinv.i_d [12], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$563 (A=\intStage[1].int.zinv.i_d [13], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$564 (A=\intStage[1].int.zinv.i_d [14], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$548 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$178 (A=$auto$wreduce.cc:455:run$57 [4], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$168 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$556 (A=\intStage[1].int.zinv.i_d [6], B=1'0, S=\i_rst) into $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
<suppressed ~567 debug messages>
Removed a total of 189 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..
Removed 101 unused cells and 1056 unused wires.
<suppressed ~102 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cic_pruned.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cic_pruned'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cic_pruned..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/latches_map.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\cic_pruned' to `<abc-temp-dir>/input.blif'..
Extracted 104 gates and 238 wires to a netlist network with 133 inputs and 99 outputs.

2.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     100.
ABC: Participating nodes from both networks       =     200.
ABC: Participating nodes from the first network   =      99. (  99.00 % of nodes)
ABC: Participating nodes from the second network  =     101. ( 101.00 % of nodes)
ABC: Node pairs (any polarity)                    =      99. (  99.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =      99. (  99.00 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      198
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:      133
ABC RESULTS:          output signals:       99
Removing temp directory.
Removed 0 unused cells and 146 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: C:\Users\brett\fpga\yosys\share\ice40/cells_map.v
Parsing Verilog input from `C:\Users\brett\fpga\yosys\share\ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
No more expansions possible.
<suppressed ~143 debug messages>
Removed 0 unused cells and 198 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \cic_pruned

2.43.2. Analyzing design hierarchy..
Top module:  \cic_pruned
Removed 0 unused modules.

2.44. Printing statistics.

=== cic_pruned ===

   Number of wires:                192
   Number of wire bits:           1034
   Number of public wires:          82
   Number of public wire bits:     754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                457
     SB_CARRY                       93
     SB_DFF                         16
     SB_DFFE                        48
     SB_DFFESR                      53
     SB_DFFSR                       48
     SB_LUT4                       199

2.45. Executing CHECK pass (checking for obvious problems).
checking module cic_pruned..
found and reported 0 problems.

2.46. Executing JSON backend.

End of script. Logfile hash: 1117b9b4c5
Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os)
Time spent: 1% 17x opt_clean (0 sec), 1% 16x opt_expr (0 sec), ...
